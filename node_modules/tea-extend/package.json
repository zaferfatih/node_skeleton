{
  "_args": [
    [
      "tea-extend@0.2.x",
      "/Users/zaferfatih/Developer/node_skeleton/node_modules/apnagent"
    ]
  ],
  "_from": "tea-extend@>=0.2.0 <0.3.0",
  "_id": "tea-extend@0.2.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/tea-extend",
  "_npmUser": {
    "email": "jake@alogicalparadox.com",
    "name": "jakeluer"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "name": "tea-extend",
    "raw": "tea-extend@0.2.x",
    "rawSpec": "0.2.x",
    "scope": null,
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/apnagent",
    "/tea-error"
  ],
  "_shrinkwrap": null,
  "_spec": "tea-extend@0.2.x",
  "_where": "/Users/zaferfatih/Developer/node_skeleton/node_modules/apnagent",
  "author": {
    "email": "jake@qualiancy.com",
    "name": "Jake Luer",
    "url": "http://qualiancy.com"
  },
  "bugs": {
    "url": "https://github.com/qualiancy/tea-extend/issues"
  },
  "dependencies": {},
  "description": "Shallow object merge utility.",
  "devDependencies": {
    "chai": "*",
    "component": "*",
    "mocha": "*",
    "mocha-phantomjs": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "a820ecc6bc662538c61fe7510f35db475314d5a6",
    "tarball": "http://registry.npmjs.org/tea-extend/-/tea-extend-0.2.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/qualiancy/tea-extend#readme",
  "keywords": [],
  "license": "MIT",
  "main": "./index",
  "maintainers": [
    {
      "name": "jakeluer",
      "email": "jake@alogicalparadox.com"
    }
  ],
  "name": "tea-extend",
  "optionalDependencies": {},
  "readme": "# tea-extend [![Build Status](https://secure.travis-ci.org/qualiancy/tea-extend.png?branch=master)](https://travis-ci.org/qualiancy/tea-extend)\n\n> Shallow object merge utility.\n\n## Installation\n\n### Node.js\n\n`tea-extend` is available on [npm](http://npmjs.org).\n\n    $ npm install tea-extend\n\n### Component\n\n`tea-extend` is available as a [component](https://github.com/component/component).\n\n    $ component install qualiancy/tea-extend\n\n## Usage\n\n### extend (destination, source, ...)\n\n* **@param** _{Object}_ destination \n* **@param** _{Object}_ sources ...\n* **@return** _{Object}_  destination extended\n\nFor each source, shallow merge its key/values to the\ndestinatino. Sources are read in order, meaning the same\nkey in a later source will overwrite the key's value earlier\nset.\n\n```js\nvar extend = require('tea-extend');\n\n// sample objects\nvar a = { hello: 'universe' }\n  , b = { speak: 'loudly' };\n\n// change a\nextend(a, b);\na.should.deep.equal({ hello: 'universe', speak: 'loudly' });\n\n// shallow clone to c\nvar c = extend({}, a);\na.language = 'en';\n\na.should.deep.equal({ hello: 'universe', speak: 'loudly', language: 'en' });\nc.should.deep.equal({ hello: 'universe', speak: 'loudly' });\n```\n\n\n### extend.include (props, ...)\n\n* **@param** _{String}_ each property to include as an argument\n* **@return** _{Function}_  reusable include function\n\nCreate a new object that only includes the properties\nspecified. Unlike `extend()`, the original objects\nwill not be modified.\n\nThis method will return a function that can be\nreused for the specified properties. Like `extend()`,\nthis function accepts an unlimited number of objects\nas parameters to draw from. Also, the same key in later\nspecified objects will overwrite earlier specified values.\n\n```js\nvar extend = require('tea-extend')\n  , include = extend.include('one', 'two');\n\nvar a = { one: 1, three: 3 }\n  , b = { zero: 0, two: 2 };\n\nvar c = include(a, b);\n\nc.should.deep.equal({ one: 1, two: 2 });\n```\n\n\n### extend.exclude (props, ...)\n\n* **@param** _{String}_ each property to exclude as an argument\n* **@return** _{Function}_  reusable exclude function\n\nCreate a new object that include all but the properties\nspecified. Unlike `extend()`, the original objects\nwill not be modified.\n\nThis method will return a function that can be\nreused for the specified properties. Like `extend()`,\nthis function accepts an unlimited number of objects\nas parameters to draw from. Also, the same key in later\nspecified objects will overwrite earlier specified values.\n\n```js\nvar extend = require('tea-extend')\n  , exclude = extend.exclude('one', 'two');\n\nvar a = { one: 1, three: 3 }\n  , b = { zero: 0, two: 2 };\n\nvar c = exclude(a, b);\n\nc.should.deep.equal({ three: 3, zero: 0 });\n```\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Jake Luer <jake@qualiancy.com> (http://qualiancy.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/qualiancy/tea-extend.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.2.0"
}
