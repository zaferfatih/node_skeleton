{
  "_args": [
    [
      "breeze-async@0.1.x",
      "/Users/zaferfatih/Developer/node_skeleton/node_modules/apnagent"
    ]
  ],
  "_from": "breeze-async@>=0.1.0 <0.2.0",
  "_id": "breeze-async@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/breeze-async",
  "_npmUser": {
    "email": "jake@alogicalparadox.com",
    "name": "jakeluer"
  },
  "_npmVersion": "1.1.63",
  "_phantomChildren": {},
  "_requested": {
    "name": "breeze-async",
    "raw": "breeze-async@0.1.x",
    "rawSpec": "0.1.x",
    "scope": null,
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/apnagent"
  ],
  "_shrinkwrap": null,
  "_spec": "breeze-async@0.1.x",
  "_where": "/Users/zaferfatih/Developer/node_skeleton/node_modules/apnagent",
  "author": {
    "email": "jake@qualiancy.com",
    "name": "Jake Luer",
    "url": "http://qualiancy.com"
  },
  "bugs": {
    "url": "https://github.com/qualiancy/breeze-async/issues"
  },
  "dependencies": {},
  "description": "Simple series and parallel flow control.",
  "devDependencies": {
    "chai": "*",
    "chai-spies": "*",
    "component": "*",
    "mocha": "*",
    "mocha-phantomjs": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "ba4265949980a3d9d8bb9137a61a42e1f87da73a",
    "tarball": "http://registry.npmjs.org/breeze-async/-/breeze-async-0.1.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/qualiancy/breeze-async#readme",
  "keywords": [],
  "license": "MIT",
  "main": "./index",
  "maintainers": [
    {
      "name": "jakeluer",
      "email": "jake@alogicalparadox.com"
    }
  ],
  "name": "breeze-async",
  "optionalDependencies": {},
  "readme": "# breeze-async [![Build Status](https://secure.travis-ci.org/qualiancy/breeze-async.png?branch=master)](https://travis-ci.org/qualiancy/breeze-async)\n\n> Simple series and parallel flow control.\n\n## Installation\n\n### Node.js\n\n`breeze-async` is available on [npm](http://npmjs.org).\n\n    $ npm install breeze-async\n\n### Component\n\n`breeze-async` is available as a [component](https://github.com/component/component).\n\n    $ component install qualiancy/breeze-async\n\n## Usage\n\nOnce you require `breeze-async`, the following API will be available.\n\n```js\nvar async = require('breeze-async');\n```\n\n### .forEach (array, iterator, done)\n\n* **@param** _{Array}_ array to iterate\n* **@param** _{Function}_ iterator function\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n\nApply an iterator to each item in an array\nin parellel. Execute a callback when all items\nhave been completed or immediately if there is\nan error provided.\n\n```js\nasync.forEach([ 1, 2, 3 ], function (i, next) {\n  setTimeout(function () {\n    console.log(i);\n    next();\n  }, 10);\n}, function (err) {\n  should.not.exist(err);\n  console.log('all done');\n});\n```\n\n\n### .forEachSeries (array, iterator, done)\n\n* **@param** _{Array}_ array to iterate\n* **@param** _{Function}_ iterator function\n* **@param** _{Function}_ callback on complete or error\n* **@cb** _{Error|null}_ if error\n\nApply an iterator to each item in an array\nserially. Execute a callback when all items\nhave been completed or immediately if there is\nis an error provided.\n\n```js\nasync.forEachSeries([ 1, 2, 3 ], function (i, next) {\n  setTimeout(function () {\n    console.log(i);\n    next();\n  }, 10);\n}, function (err) {\n  should.not.exist(err);\n  console.log('all done');\n});\n```\n\n\n### .parallel (fns, done)\n\n* **@param** _{Array|Object}_ functions to execute\n* **@param** _{Function}_ callback on completion or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Array|Object}_ reflecting the results\n\nExecute a collection of functions in parellel\nand execute a callback upon completion or occurance\nof an error. Functions can be provided as either\nan array or an object. Each function will be passed\na callback to signal completion. The callback accepts\neither an error for the first argument, or null for the\nfirst argument and results following. The results will be\nprovied as the second argument of the callback in-kind,\nmaintaining the order of the input array or the keys\nof the input object.\n\n##### Asrray\n\n```js\nasync.parallel([\n    function (next) {\n      setTimeout(function () {\n        next(null, 'one');\n      }, 15);\n    }\n  , function (next) {\n      setTimeout(function () {\n        next(null, 'two');\n      }, 10);\n    }\n  , function (next) {\n      setTimseout(function () {\n        next(null, 'three');\n      }, 5);\n    }s\n], function (err, res) {\n  should.not.exist(err);\n  res.should.deep.equal([ 'one', 'two', 'three' ]);\n});\n```\n\n##### Object\n\n```js\nasync.parallel({\n    one: function (next) {\n      setTimeout(function () {\n        next(null, 'one');\n      }, 15);\n    }\n  , two: function (next) {\n      setTimeout(function () {\n        next(null, 'two');\n      }, 10);\n    }\n  , three: function (next) {\n      setTimeout(function () {\n        next(null, 'three');\n      }, 5);\n    }\n}, function (err, res) {\n  should.not.exist(err);\n  res.should.deep.equal({\n      one: 'one'\n    , two: 'two'\n    , three: 'three'\n  });\n});\n```\n\n\n### series (fns, done)\n\n* **@param** _{Array|Object}_ functions to execute\n* **@param** _{Function}_ callback on completion or error\n* **@cb** _{Error|null}_ if error\n* **@cb** _{Array|Object}_ reflecting the results\n\nExecute a collection of functions serially\nand execute a callback upon completion or occurance\nof an error. Functions can be provided as either\nan array or an object. Each function will be passed\na callback to signal completion. The callback accepts\neither an error for the first argument, or null for the\nfirst argument and results following. The results will be\nprovied as the second argument of the callback in-kind,\nmaintaining the order of the input array or the keys\nof the input object.\n\n##### Asrray\n\n```js\nasync.series([\n    function (next) {\n      setTimeout(function () {\n        next(null, 'one');\n      }, 15);\n    }\n  , function (next) {\n      setTimeout(function () {\n        next(null, 'two');\n      }, 10);\n    }\n  , function (next) {\n      setTimseout(function () {\n        next(null, 'three');\n      }, 5);\n    }s\n], function (err, res) {\n  should.not.exist(err);\n  res.should.deep.equal([ 'one', 'two', 'three' ]);\n});\n```\n\n##### Object\n\n```js\nasync.series({\n    one: function (next) {\n      setTimeout(function () {\n        next(null, 'one');\n      }, 15);\n    }\n  , two: function (next) {\n      setTimeout(function () {\n        next(null, 'two');\n      }, 10);\n    }\n  , three: function (next) {\n      setTimeout(function () {\n        next(null, 'three');\n      }, 5);\n    }\n}, function (err, res) {\n  should.not.exist(err);\n  res.should.deep.equal({\n      one: 'one'\n    , two: 'two'\n    , three: 'three'\n  });\n});\n```\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Jake Luer <jake@qualiancy.com> (http://qualiancy.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/qualiancy/breeze-async.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.0"
}
